.TH qlibs: dnsresolv
.SH NAME
dns \- dns resolver routines
.SH SYNTAX
.B #include \(dqdnsresolv.h\(dq

int \fBdns_ip4_packet\fP(stralloc *\fIout\fR,const char *\fIbuf\fR,unsigned int \fIlen\fR);
.br
int \fBdns_ip4_qualify\fP(stralloc *\fIout\fR,stralloc *\fIfqdn\fR,const stralloc *\fIudn\fR);
.br
int \fBdns_ip4\fP(stralloc *\fIout\fR,stralloc *\fIfqdn\fR);

int \fBdns_ip6_packet\fP(stralloc *\fIout\fR,const char *\fIbuf\fR,unsigned int \fIlen\fR);
.br
int \fBdns_ip6_qualify\fP(stralloc *\fIout\fR,stralloc *\fIfqdn\fR,const stralloc *\fIudn\fR);
.br
int \fBdns_ip6\fP(stralloc *\fIout\fR,stralloc *\fIfqdn\fR);

int \fBdns_mx\fP(stralloc *\fIout\fR,stralloc *\fIfqdn\fR);
.br
int \fBdns_mx_packet\fP(stralloc *\fIout\fR,const char *\fIbuf\fR,unsigned int \fIlen\fR);

void \fBdns_name4_domain\fP(char \fIq\fR[DNS_NAME4_DOMAIN],const char *\fIip\fR[4]);
.br
int \fBdns_name4\fP(stralloc *\fIout\fR,const char *\fIip\fR[4]);

void \fBdns_name6_domain\fP(char \fIq\fR[DNS_NAME6_DOMAIN],const char *\fIip\fR[16]);
.br
int \fBdns_name6\fP(stralloc *\fIout\fR,const char *\fIip\fR[16]);

int \fBdns_name\fP(stralloc *\fIout\fR,const char *\fIip\fR[16]);
.br
int \fBdns_name_packet\fP(stralloc *\fIout\fR,const char *\fIbuf\fR,unsigned int \fIlen\fR);

int \fBdns_txt\fP(stralloc *\fIout\fR,stralloc *\fIfqdn\fR);
.br
int \fBdns_txt_packet\fP(stralloc *\fIout\fR,const char *\fIbuf\fR,unsigned int \fIlen\fR);

int \fBdns_cname\fP(stralloc *\fIout\fR,stralloc *\fIfqdn\fR);
.br
int \fBdns_cname_packet\fP(stralloc *\fIout\fR,const char *\fIbuf\fR,unsigned int \fIlen\fR);
.SH DESCRIPTION
.B dns_ip4_packet 
is a low-level component of 
.BR dns_ip4 , 
designed to support asynchronous DNS lookups. 
It reads a DNS packet of length \fIlen\fR from
\fIbuf\fR, extracts IP addresses from the answer section of the packet,
puts the addresses into \fIout\fR.

.B dns_ip4_qualify 
feeds the name \fIudn\fR through qualification and looks up
4-byte IP addresses for the result. It puts the fully qualified domain name
into \fIfqdn\fR, puts the concatenation of the IP addresses into \fIout\fR, and
returns \fI0\fR. If the domain does not exist in DNS, or has no IP addresses,
\fIout\fR will be empty.

.B dns_ip4 
looks up 4-byte IP addresses for the fully-qualified domain name in
\fIfqdn\fR. It puts the concatenation of the IP addresses into \fIout\fR and
returns \fI0\fR. If the domain does not exist in DNS, or has no IP addresses,
\fIout\fR will be empty.
If \fIfqdn\fR is a dotted-decimal IP address, 
.B dns_ip4 
puts that IP address into
\fIout\fR without checking DNS. More generally, if \fIfqdn\fR is a
dot-separated sequence of dotted-decimal IP addresses, dns_ip4 puts those IP
addresses into out without checking DNS. Brackets may appear inside the
dotted-decimal IP addresses; they are ignored.

.B dns_ip6_packet 
is a low-level component of 
.BR dns_ip6 , 
designed to support asynchronous DNS lookups. 
It reads a DNS packet of length \fIlen\fR from \fIbuf\fR, 
extracts IPv4 and IPv6 addresses from the answer section of the packet, 
puts the addresses into \fIout\fR, and returns the number of replies received,
which of course may be \fI0\fR or \fI-1\fR in case of memory shortage in the same way as 
.BR dns_ip6 .

.B dns_ip6_qualify 
feeds the name \fIudn\fR through qualification and looks up the
16-byte IPv6 addresses for the result. It puts the fully qualified domain name
into \fIfqdn\fR, puts the concatenation of the IP addresses into \fIout\fR, and
returns \fI0\fR. If the domain does not exist in DNS, or has no IP addresses,
\fIout\fR will be empty.

.B dns_ip6_qualify 
also looks up 4-byte IPv4 addresses and converts them
into IPv4-mapped IPv6 addresses (\fI::ffff:1.2.3.4\fR) to provide easy
backwards compatibility for IPv6 applications.

.B dns_ip6 
looks up 16-byte IPv6 addresses for the fully-qualified domain name in
\fIfqdn\fR. It puts the concatenation of the IPv6 addresses into \fIout\fR and
returns \fI0\fR. If the domain does not exist in DNS, or has no IP addresses,
\fIout\fR will be empty.
.B dns_ip6 
also looks up 4-byte IPv4 addresses and converts them into
IPv4-mapped IPv6 addresses (\fI::ffff:1.2.3.4\fR) to provide easy backwards
compatibility for IPv6 applications.
If \fIfqdn\fR is an IPv6 address, 
.B dns_ip6 
puts that IP address into \fIout\fR without checking DNS.  
IPv4 addresses are also used directly without DNS lookup.

.B dns_mx 
looks up MX records for the fully-qualified domain name in
\fIfqdn\fR. It puts the MX records into \fIout\fR and returns \fI0\fR. 
Each MX record is a two-byte MX distance (big endian) followed by a
\\0-terminated dot-encoded domain name. If the domain does not exist in
DNS, or has no MX records, \fIout\fR will be empty.

.B dns_mx_packet 
is a low-level component of dns_mx, designed to support
asynchronous DNS lookups. It reads a DNS packet of length \fIlen\fR from \fIbuf\fR,
extracts the MX records from the answer section of the packet, puts the
result into \fIout\fR, and returns the number of replies received 
or \fI-1\fR the same way as 
.BR dns_mx .

.B dns_name4_domain 
is a low-level component of 
.BR dns_name4 .  
It converts an IP address such as 
.I 1.2.3.4 
into a domain name such as
.I 4.3.2.1.in-addr.arpa 
and places the packet-encoded domain name into \fIq\fR.
.I q 
is zero terminated.
.I q 
must have space for DNS_NAME4_DOMAIN bytes.

.B dns_name4 
looks up the domain name for the 4-byte IP address in \fIip\fR. It
puts the (first) domain name into \fIout\fR and returns \fI0\fR. If the relevant
.I in-addr.arpa 
domain does not exist in DNS, or has no PTR records, \fIout\fR will be empty.

.B dns_name6_domain 
is a low-level component of 
.BR dns_name6 .  
It converts an IP address such as 
.I 4321:0:1:2:3:4:567:89ab 
into a domain name such as
.I b.a.9.8.7.6.5.0.4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.0.0.0.0.1.2.3.4.ip6.arpa
and places the packet-encoded domain name into \fIq\fR.
.I q 
is zero terminated.
.I q 
must have space for DNS_NAME6_DOMAIN bytes.

.B dns_name6 
looks up the domain name for the 16-byte IPv6 address in \fIip\fR. It
puts the (first) domain name into \fIout\fR and returns \fI0\fR. If the relevant
.I ip6.arpa 
domain does not exist in DNS, or has no PTR records, \fIout\fR will be empty.

.B dns_name
looks up the domain name for the 16-byte IPv6 address in \fIip\fR calling
.BR dns_name6 .
In case a IPv4-mappped IPv6 address is recognized, it uses
.BR dns_name4 .

.B dns_name_packet 
is a low-level component of 
.B dns_name4 
and
.B dns_name6
designed to support asynchronous DNS lookups. 
It reads a DNS packet of length \fIlen\fR from \fIbuf\fR,
extracts the first PTR record from the answer section of the packet, puts the
result into \fIout\fR.

.B dns_txt 
looks up TXT records for the fully-qualified domain name in
\fIfqdn\fR. It puts the concatenation of the TXT records into \fIout\fR
and returns the number of replies received.  
If the domain does not exist in DNS, or has no TXT records, \fIout\fR will be empty.

.B dns_txt_packet 
is a low-level component of 
.BR dns_txt , 
designed to support
asynchronous DNS lookups. It reads a DNS packet of length \fIlen\fR from \fIbuf\fR,
extracts the TXT records from the answer section of the packet, puts the
result into \fIout\fR, and returns the number of replies 
or \fI-1\fR the same way as \fBdns_txt\fR.

.B dns_cname
looks up the canonical name for a given
.IR fqdn .

.B dns_cname_packet 
is a low-level component of 
.BR dns_cname ,
designed to support
asynchronous DNS lookups. It reads a DNS packet of length \fIlen\fR from \fIbuf\fR,
extracts the TXT records from the answer section of the packet, puts the
result into \fIout\fR, and returns the number of replies received  or
\fI-1\fR the same way as \fBdns_cname\fR.
.SH "INPUT"
For the high-level routines
.BR dns_ip4 ,
.BR dns_ip6 ,
.BR dns_mx ,
.BR dns_name4 ,
.BR dns_name6 ,
.BR dns_name ,
.BR dns_txt 
and 
.BR dns_cname
the provided input variable
.I stralloc \*\fqdn
needs to be un-terminated, thus the given
string length is identitical to the number of 
.I fqdn 
characters.
.SH "RETURN CODES"
The dns routines 
.BR dns_cname* ,
.BR dns_ip* ,
.BR dns_mx* ,
.B dns_name*
and
.BR dns_txt*
return the number of answers received, which may be 
.I 0 
and potentially
.I -1
in case of a memory failure.
The other dns routines simply return
.I 0
in case of a successful operation. 
In case the DNS lookup fails or the routine runs out of memory, 
.I -1 
is returned and setting 
.I errno 
appropriately.
In case of a failure, the respective output variables like
\fIout\fR and \fIfqdn\fR may or may not change.
.SH "SEE ALSO"
ip4(3), 
ip6(3), 
dnsstub(3)
